<?php
class SDL_Surface implements Stringable {
    public function __construct(
        public int $flags,
        public SDL_PixelFormat $format,
        public int $w,
        public int $h,
        public int $pitch,
        public mixed $pixels,
        public mixed $userdata,
        public int $locked,
        public mixed $lock_data,
        public SDL_Rect $clip_rect,
        public SDL_BlitMap $map,
        public int $refcount,
    ) {
    }

    /**
     * Load a /usr/share/code/resources/app/out/vs/code/electron-sandbox/workbench/workbench.htmlsurface from a file.
     * 
     * stream are supported.
     * @param  string|resource  $file
     * @return null|SDL_Surface
     */
    public static function LoadBMP(string $file):null|SDL_Surface {
        return null;
    }

    /**
     * Performs a fast fill of the given rectangle with `$color`.
     *
     * If `$rect` is `NULL`, the whole surface will be filled with  `$color`.
     *
     * The color should be a pixel of the format used by the surface, and can be generated by the `SDL_MapRGB()` function.
     * @param  SDL_Rect $rect
     * @param  int      $color
     * @return void     0 on success, or -1 on error.
     */
    public function FillRect(
        SDL_Rect $rect,
        int $color
    ):int {
        return 0;
    }

    /**
     * 
     * @param  array<SDL_Rect> $rects
     * @param  int             $count
     * @param  int             $color
     * @return int
     */
    public function FillRects(
        array $rects,
        int $count,
        int $color
    ):int {
        return 0;
    }

    /**
     * Evaluates to true if the surface needs to be locked before access.
     * define SDL_MUSTLOCK(S) (((S)->flags & SDL_RLEACCEL) != 0)
     * @return bool
     */
    public function MUSTLOCK():bool {
        return true;
    }

    /**
     * Performs a fast blit from the source surface to the destination surface.
     *
     * This assumes that the source and destination rectangles are
     * the same size.  If either `$srcrect` or `$dstrect` are `NULL`, the entire
     * surface (`$src` or `$dst`) is copied.  The final blit rectangles are saved
     * in `$srcrect` and `$dstrect` after all clipping is performed.
     *
     * The blit function should not be called on a locked surface.
     * @param  SDL_Rect      $srcrect
     * @param  SDL_Surface   $dst
     * @param  SDL_Rect|null $dstrect
     * @return void          returns 0, otherwise it returns -1.
     */
    public function Blit(
        SDL_rect &$srcrect,
        SDL_Surface $dst,
        SDL_rect &$dstrect = null,
    ):void {
    }

    /**
     * Performs a fast blit from the source surface to the destination surface.
     *
     * This assumes that the source and destination rectangles are
     * the same size.  If either `$srcrect` or `$dstrect` are `NULL`, the entire
     * surface (`$src` or `$dst`) is copied.  The final blit rectangles are saved
     * in `$srcrect` and `$dstrect` after all clipping is performed.
     *
     * The blit function should not be called on a locked surface.
     * @param  SDL_Rect      $srcrect
     * @param  SDL_Surface   $dst
     * @param  SDL_Rect|null $dstrect
     * @return void          returns 0, otherwise it returns -1.
     */
    public function UpperBlit(
        SDL_rect &$srcrect,
        SDL_Surface $dst,
        SDL_rect &$dstrect = null,
    ):void {
    }

    /**
     * This is a semi-private blit function and it performs low-level surface blitting only.
     * @param  SDL_Rect    $srcrect
     * @param  SDL_Surface $dst
     * @param  SDL_Rect    $dstrect
     * @return void
     */
    public function LowerBlit(
        SDL_rect &$srcrect,
        SDL_Surface $dst,
        SDL_rect &$dstrect,
    ):void {
    }

    /**
     * This is the public scaled blit function, `SDL_BlitScaled()`, and it performs rectangle validation and clipping before passing it to `SDL_LowerBlitScaled()`.
     * @param  SDL_Rect      $srcrect
     * @param  SDL_Surface   $dst
     * @param  SDL_Rect|null $dstrect
     * @return void
     */
    public function BlitScaled(
        SDL_rect &$srcrect,
        SDL_Surface $dst,
        SDL_rect &$dstrect = null
    ):void {
    }

    /**
     * This is the public scaled blit function, `SDL_BlitScaled()`, and it performs rectangle validation and clipping before passing it to `SDL_LowerBlitScaled()`.
     * @param  SDL_Rect      $srcrect
     * @param  SDL_Surface   $dst
     * @param  SDL_Rect|null $dstrect
     * @return void
     */
    public function UpperBlitScaled(
        SDL_rect &$srcrect,
        SDL_Surface $dst,
        SDL_rect &$dstrect = null
    ):void {
    }

    /**
     * This is a semi-private blit function and it performs low-level surface scaled blitting only.
     * @param  SDL_Rect    $srcrect
     * @param  SDL_Surface $dst
     * @param  SDL_Rect    $dstrect
     * @return void
     */
    public function LowerBlitScaled(
        SDL_rect &$srcrect,
        SDL_Surface $dst,
        SDL_rect &$dstrect,
    ):void {
    }

    /**
     * Perform a fast, low quality, stretch blit between two surfaces of the same pixel format.
     * 
     * This function uses a static buffer, and is not thread-safe.
     * @param  SDL_Rect    $srcrect
     * @param  SDL_Surface $dst
     * @param  SDL_Rect    $dstrect
     * @return void
     */
    public function SoftStretch(
        SDL_rect $srcrect,
        SDL_Surface $dst,
        SDL_rect $dstrect
    ):void {
    }

    /**
     * Save a surface to a seekable SDL data stream (memory or file).
     *
     * If `$freedst` is non-zero, the stream will be closed after being written.
     * @param  SDL_RWops $dst
     * @param  int       $freedst
     * @return int       0 if successful or -1 if there was an error.
     */
    public function SaveBMP_RW(
        SDL_RWops &$dst,
        int $freedst
    ):int {
        return 0;
    }

    /**
     * stream are "partially" supported (only when `PHP_STREAM_AS_STDIO`).
     * @param  string $path
     * @return int
     */
    public function SaveBMP(
        string $path
    ):int {
        return 0;
    }

    /**
     * Sets the color key (transparent pixel) in a blittable surface.
     * 
     * You can pass SDL_RLEACCEL to enable RLE accelerated blits.
     * @param  int $flag Non-zero to enable colorkey and 0 to disable colorkey.
     * @param  int $key  key The transparent pixel in the native surface format.
     * @return int 0 on success, or -1 if the surface is not valid.
     */
    public function SetColorKey(
        int $flag,
        int $key = 0
    ):int {
        return 0;
    }

    /**
     * Gets the color key (transparent pixel) in a blittable surface.
     * @param  int $key A pointer filled in with the transparent pixel in the native surface format.
     * @return int 0 on success, or -1 if the surface is not valid or colorkey is not enabled.
     */
    public function GetColorKey(
        int &$key
    ):int {
        return 0;
    }

    /**
     * Sets the clipping rectangle for the destination surface in a blit.
     *
     * If the clip rectangle is NULL, clipping will be disabled.
     *
     * If the clip rectangle doesn't intersect the surface, the function will
     * return SDL_FALSE and blits will be completely clipped.  Otherwise the
     * function returns SDL_TRUE and blits to the surface will be clipped to
     * the intersection of the surface area and the clipping rectangle.
     *
     * Note that blits are automatically clipped to the edges of the source
     * and destination surfaces.
     * @param  SDL_Rect $cliprect
     * @return void
     */
    public function SetClipRect(
        SDL_Rect $cliprect,
    ):void {
    }

    /**
     * Gets the clipping rectangle for the destination surface in a blit.
     *
     * `$rect` must be a pointer to a valid rectangle which will be filled with the correct values.
     * @param  SDL_Rect $rect
     * @return void
     */
    public function GetClipRect(
        SDL_Rect &$rect
    ):void {
    }

    public function __toString(): string {
        return '';
    }
}
// row 1753