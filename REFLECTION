Extension [ <persistent> extension #16 SDL version 2.0.0-dev ] {

  - Constants [119] {
    Constant [ integer SDL_BLENDMODE_NONE ] { 0 }
    Constant [ integer SDL_BLENDMODE_BLEND ] { 1 }
    Constant [ integer SDL_BLENDMODE_ADD ] { 2 }
    Constant [ integer SDL_BLENDMODE_MOD ] { 4 }
    Constant [ integer SDL_POWERSTATE_UNKNOWN ] { 0 }
    Constant [ integer SDL_POWERSTATE_ON_BATTERY ] { 1 }
    Constant [ integer SDL_POWERSTATE_NO_BATTERY ] { 2 }
    Constant [ integer SDL_POWERSTATE_CHARGING ] { 3 }
    Constant [ integer SDL_POWERSTATE_CHARGED ] { 4 }
    Constant [ integer SDL_PIXELTYPE_UNKNOWN ] { 0 }
    Constant [ integer SDL_PIXELTYPE_INDEX1 ] { 1 }
    Constant [ integer SDL_PIXELTYPE_INDEX4 ] { 2 }
    Constant [ integer SDL_PIXELTYPE_INDEX8 ] { 3 }
    Constant [ integer SDL_PIXELTYPE_PACKED8 ] { 4 }
    Constant [ integer SDL_PIXELTYPE_PACKED16 ] { 5 }
    Constant [ integer SDL_PIXELTYPE_PACKED32 ] { 6 }
    Constant [ integer SDL_PIXELTYPE_ARRAYU8 ] { 7 }
    Constant [ integer SDL_PIXELTYPE_ARRAYU16 ] { 8 }
    Constant [ integer SDL_PIXELTYPE_ARRAYU32 ] { 9 }
    Constant [ integer SDL_PIXELTYPE_ARRAYF16 ] { 10 }
    Constant [ integer SDL_PIXELTYPE_ARRAYF32 ] { 11 }
    Constant [ integer SDL_BITMAPORDER_NONE ] { 0 }
    Constant [ integer SDL_BITMAPORDER_4321 ] { 1 }
    Constant [ integer SDL_BITMAPORDER_1234 ] { 2 }
    Constant [ integer SDL_PACKEDORDER_NONE ] { 0 }
    Constant [ integer SDL_PACKEDORDER_XRGB ] { 1 }
    Constant [ integer SDL_PACKEDORDER_RGBX ] { 2 }
    Constant [ integer SDL_PACKEDORDER_ARGB ] { 3 }
    Constant [ integer SDL_PACKEDORDER_RGBA ] { 4 }
    Constant [ integer SDL_PACKEDORDER_XBGR ] { 5 }
    Constant [ integer SDL_PACKEDORDER_BGRX ] { 6 }
    Constant [ integer SDL_PACKEDORDER_ABGR ] { 7 }
    Constant [ integer SDL_PACKEDORDER_BGRA ] { 8 }
    Constant [ integer SDL_PACKEDLAYOUT_NONE ] { 0 }
    Constant [ integer SDL_PACKEDLAYOUT_332 ] { 1 }
    Constant [ integer SDL_PACKEDLAYOUT_4444 ] { 2 }
    Constant [ integer SDL_PACKEDLAYOUT_1555 ] { 3 }
    Constant [ integer SDL_PACKEDLAYOUT_5551 ] { 4 }
    Constant [ integer SDL_PACKEDLAYOUT_565 ] { 5 }
    Constant [ integer SDL_PACKEDLAYOUT_8888 ] { 6 }
    Constant [ integer SDL_PACKEDLAYOUT_2101010 ] { 7 }
    Constant [ integer SDL_PACKEDLAYOUT_1010102 ] { 8 }
    Constant [ integer SDL_PIXELFORMAT_UNKNOWN ] { 0 }
    Constant [ integer SDL_PIXELFORMAT_INDEX1LSB ] { 286261504 }
    Constant [ integer SDL_PIXELFORMAT_INDEX1MSB ] { 287310080 }
    Constant [ integer SDL_PIXELFORMAT_INDEX4LSB ] { 303039488 }
    Constant [ integer SDL_PIXELFORMAT_INDEX4MSB ] { 304088064 }
    Constant [ integer SDL_PIXELFORMAT_INDEX8 ] { 318769153 }
    Constant [ integer SDL_PIXELFORMAT_RGB332 ] { 336660481 }
    Constant [ integer SDL_PIXELFORMAT_RGB444 ] { 353504258 }
    Constant [ integer SDL_PIXELFORMAT_RGB555 ] { 353570562 }
    Constant [ integer SDL_PIXELFORMAT_BGR555 ] { 357764866 }
    Constant [ integer SDL_PIXELFORMAT_ARGB4444 ] { 355602434 }
    Constant [ integer SDL_PIXELFORMAT_RGBA4444 ] { 356651010 }
    Constant [ integer SDL_PIXELFORMAT_ABGR4444 ] { 359796738 }
    Constant [ integer SDL_PIXELFORMAT_BGRA4444 ] { 360845314 }
    Constant [ integer SDL_PIXELFORMAT_ARGB1555 ] { 355667970 }
    Constant [ integer SDL_PIXELFORMAT_RGBA5551 ] { 356782082 }
    Constant [ integer SDL_PIXELFORMAT_ABGR1555 ] { 359862274 }
    Constant [ integer SDL_PIXELFORMAT_BGRA5551 ] { 360976386 }
    Constant [ integer SDL_PIXELFORMAT_RGB565 ] { 353701890 }
    Constant [ integer SDL_PIXELFORMAT_BGR565 ] { 357896194 }
    Constant [ integer SDL_PIXELFORMAT_RGB24 ] { 386930691 }
    Constant [ integer SDL_PIXELFORMAT_BGR24 ] { 390076419 }
    Constant [ integer SDL_PIXELFORMAT_RGB888 ] { 370546692 }
    Constant [ integer SDL_PIXELFORMAT_RGBX8888 ] { 371595268 }
    Constant [ integer SDL_PIXELFORMAT_BGR888 ] { 374740996 }
    Constant [ integer SDL_PIXELFORMAT_BGRX8888 ] { 375789572 }
    Constant [ integer SDL_PIXELFORMAT_ARGB8888 ] { 372645892 }
    Constant [ integer SDL_PIXELFORMAT_RGBA8888 ] { 373694468 }
    Constant [ integer SDL_PIXELFORMAT_ABGR8888 ] { 376840196 }
    Constant [ integer SDL_PIXELFORMAT_BGRA8888 ] { 377888772 }
    Constant [ integer SDL_PIXELFORMAT_ARGB2101010 ] { 372711428 }
    Constant [ integer SDL_PIXELFORMAT_YV12 ] { 842094169 }
    Constant [ integer SDL_PIXELFORMAT_IYUV ] { 1448433993 }
    Constant [ integer SDL_PIXELFORMAT_YUY2 ] { 844715353 }
    Constant [ integer SDL_PIXELFORMAT_UYVY ] { 1498831189 }
    Constant [ integer SDL_PIXELFORMAT_YVYU ] { 1431918169 }
    Constant [ integer SDL_UNKNOWN ] { 0 }
    Constant [ integer SDL_WINFILE ] { 1 }
    Constant [ integer SDL_STDFILE ] { 2 }
    Constant [ integer SDL_JNIFILE ] { 3 }
    Constant [ integer SDL_MEMORY ] { 4 }
    Constant [ integer SDL_MEMORY_RO ] { 5 }
    Constant [ integer RW_SEEK_SET ] { 0 }
    Constant [ integer RW_SEEK_CUR ] { 1 }
    Constant [ integer RW_SEEK_END ] { 2 }
    Constant [ integer SDL_INIT_TIMER ] { 1 }
    Constant [ integer SDL_INIT_AUDIO ] { 16 }
    Constant [ integer SDL_INIT_VIDEO ] { 32 }
    Constant [ integer SDL_INIT_JOYSTICK ] { 512 }
    Constant [ integer SDL_INIT_HAPTIC ] { 4096 }
    Constant [ integer SDL_INIT_GAMECONTROLLER ] { 8192 }
    Constant [ integer SDL_INIT_EVENTS ] { 16384 }
    Constant [ integer SDL_INIT_NOPARACHUTE ] { 1048576 }
    Constant [ integer SDL_INIT_EVERYTHING ] { 29233 }
    Constant [ integer SDL_SWSURFACE ] { 0 }
    Constant [ integer SDL_PREALLOC ] { 1 }
    Constant [ integer SDL_RLEACCEL ] { 2 }
    Constant [ integer SDL_DONTFREE ] { 4 }
    Constant [ integer SDL_COMPILEDVERSION ] { 2001 }
    Constant [ integer SDL_MAJOR_VERSION ] { 2 }
    Constant [ integer SDL_MINOR_VERSION ] { 0 }
    Constant [ integer SDL_PATCHLEVEL ] { 1 }
    Constant [ string SDL_REVISION ] { hg-7890:c031abe0b287 }
    Constant [ integer SDL_WINDOW_FULLSCREEN ] { 1 }
    Constant [ integer SDL_WINDOW_OPENGL ] { 2 }
    Constant [ integer SDL_WINDOW_SHOWN ] { 4 }
    Constant [ integer SDL_WINDOW_HIDDEN ] { 8 }
    Constant [ integer SDL_WINDOW_BORDERLESS ] { 16 }
    Constant [ integer SDL_WINDOW_RESIZABLE ] { 32 }
    Constant [ integer SDL_WINDOW_MINIMIZED ] { 64 }
    Constant [ integer SDL_WINDOW_MAXIMIZED ] { 128 }
    Constant [ integer SDL_WINDOW_INPUT_GRABBED ] { 256 }
    Constant [ integer SDL_WINDOW_INPUT_FOCUS ] { 512 }
    Constant [ integer SDL_WINDOW_MOUSE_FOCUS ] { 1024 }
    Constant [ integer SDL_WINDOW_FULLSCREEN_DESKTOP ] { 4097 }
    Constant [ integer SDL_WINDOW_FOREIGN ] { 2048 }
    Constant [ integer SDL_WINDOW_ALLOW_HIGHDPI ] { 8192 }
  }

  - Functions {
    Function [ <internal:SDL> function SDL_GetCPUCount ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_GetCPUCacheLineSize ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_HasRDTSC ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_HasAltiVec ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_HasMMX ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_Has3DNow ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_HasSSE ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_HasSSE2 ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_HasSSE3 ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_HasSSE41 ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_HasSSE42 ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_GetSystemRAM ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_SetError ] {

      - Parameters [1] {
        Parameter #0 [ <required> $error_message ]
      }
    }
    Function [ <internal:SDL> function SDL_GetError ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_ClearError ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_GetPlatform ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_GetPowerInfo ] {

      - Parameters [2] {
        Parameter #0 [ <optional> &$secs ]
        Parameter #1 [ <optional> &$pct ]
      }
    }
    Function [ <internal:SDL> function SDL_GetPixelFormatName ] {

      - Parameters [1] {
        Parameter #0 [ <required> $format ]
      }
    }
    Function [ <internal:SDL> function SDL_PixelFormatEnumToMasks ] {

      - Parameters [6] {
        Parameter #0 [ <required> $format ]
        Parameter #1 [ <required> &$bpp ]
        Parameter #2 [ <required> &$Rmask ]
        Parameter #3 [ <required> &$Gmask ]
        Parameter #4 [ <required> &$Bmask ]
        Parameter #5 [ <required> &$Amask ]
      }
    }
    Function [ <internal:SDL> function SDL_MasksToPixelFormatEnum ] {

      - Parameters [5] {
        Parameter #0 [ <required> $bpp ]
        Parameter #1 [ <required> $Rmask ]
        Parameter #2 [ <required> $Gmask ]
        Parameter #3 [ <required> $Bmask ]
        Parameter #4 [ <required> $Amask ]
      }
    }
    Function [ <internal:SDL> function SDL_AllocPalette ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ncolors ]
      }
    }
    Function [ <internal:SDL> function SDL_FreePalette ] {

      - Parameters [1] {
        Parameter #0 [ <required> $palette ]
      }
    }
    Function [ <internal:SDL> function SDL_SetPaletteColors ] {

      - Parameters [4] {
        Parameter #0 [ <required> $palette ]
        Parameter #1 [ <required> $colors ]
        Parameter #2 [ <optional> $first ]
        Parameter #3 [ <optional> $ncolors ]
      }
    }
    Function [ <internal:SDL> function SDL_AllocFormat ] {

      - Parameters [1] {
        Parameter #0 [ <required> $format ]
      }
    }
    Function [ <internal:SDL> function SDL_FreeFormat ] {

      - Parameters [1] {
        Parameter #0 [ <required> $format ]
      }
    }
    Function [ <internal:SDL> function SDL_SetPixelFormatPalette ] {

      - Parameters [2] {
        Parameter #0 [ <required> $pixelformat ]
        Parameter #1 [ <required> $palette ]
      }
    }
    Function [ <internal:SDL> function SDL_MapRGB ] {

      - Parameters [4] {
        Parameter #0 [ <required> $pixelformat ]
        Parameter #1 [ <required> $r ]
        Parameter #2 [ <required> $g ]
        Parameter #3 [ <required> $b ]
      }
    }
    Function [ <internal:SDL> function SDL_MapRGBA ] {

      - Parameters [5] {
        Parameter #0 [ <required> $pixelformat ]
        Parameter #1 [ <required> $r ]
        Parameter #2 [ <required> $g ]
        Parameter #3 [ <required> $b ]
        Parameter #4 [ <required> $a ]
      }
    }
    Function [ <internal:SDL> function SDL_GetRGB ] {

      - Parameters [5] {
        Parameter #0 [ <required> $pixel ]
        Parameter #1 [ <required> $pixelformat ]
        Parameter #2 [ <required> &$r ]
        Parameter #3 [ <required> &$g ]
        Parameter #4 [ <required> &$b ]
      }
    }
    Function [ <internal:SDL> function SDL_GetRGBA ] {

      - Parameters [6] {
        Parameter #0 [ <required> $pixel ]
        Parameter #1 [ <required> $pixelformat ]
        Parameter #2 [ <required> &$r ]
        Parameter #3 [ <required> &$g ]
        Parameter #4 [ <required> &$b ]
        Parameter #5 [ <required> &$a ]
      }
    }
    Function [ <internal:SDL> function SDL_CalculateGammaRamp ] {

      - Parameters [2] {
        Parameter #0 [ <required> $gamma ]
        Parameter #1 [ <required> &$ramp ]
      }
    }
    Function [ <internal:SDL> function SDL_RectEmpty ] {

      - Parameters [1] {
        Parameter #0 [ <required> $rect ]
      }
    }
    Function [ <internal:SDL> function SDL_RectEquals ] {

      - Parameters [2] {
        Parameter #0 [ <required> $rectA ]
        Parameter #1 [ <required> $rectB ]
      }
    }
    Function [ <internal:SDL> function SDL_HasIntersection ] {

      - Parameters [2] {
        Parameter #0 [ <required> $rectA ]
        Parameter #1 [ <required> $rectB ]
      }
    }
    Function [ <internal:SDL> function SDL_IntersectRect ] {

      - Parameters [3] {
        Parameter #0 [ <required> $rectA ]
        Parameter #1 [ <required> $rectB ]
        Parameter #2 [ <required> &$result ]
      }
    }
    Function [ <internal:SDL> function SDL_UnionRect ] {

      - Parameters [3] {
        Parameter #0 [ <required> $rectA ]
        Parameter #1 [ <required> $rectB ]
        Parameter #2 [ <required> &$result ]
      }
    }
    Function [ <internal:SDL> function SDL_IntersectRectAndLine ] {

      - Parameters [5] {
        Parameter #0 [ <required> $rect ]
        Parameter #1 [ <required> &$X1 ]
        Parameter #2 [ <required> &$Y1 ]
        Parameter #3 [ <required> &$X2 ]
        Parameter #4 [ <required> &$Y2 ]
      }
    }
    Function [ <internal:SDL> function SDL_EnclosePoints ] {

      - Parameters [4] {
        Parameter #0 [ <required> $point ]
        Parameter #1 [ <required> $count ]
        Parameter #2 [ <required> $clip ]
        Parameter #3 [ <required> &$rect ]
      }
    }
    Function [ <internal:SDL> function SDL_AllocRW ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_FreeRW ] {

      - Parameters [1] {
        Parameter #0 [ <required> $RWops ]
      }
    }
    Function [ <internal:SDL> function SDL_RWFromFile ] {

      - Parameters [2] {
        Parameter #0 [ <required> $path ]
        Parameter #1 [ <required> $mode ]
      }
    }
    Function [ <internal:SDL> function SDL_RWFromFP ] {

      - Parameters [2] {
        Parameter #0 [ <required> $fp ]
        Parameter #1 [ <optional> $autoclose ]
      }
    }
    Function [ <internal:SDL> function SDL_RWFromMem ] {

      - Parameters [2] {
        Parameter #0 [ <required> &$buf ]
        Parameter #1 [ <required> $size ]
      }
    }
    Function [ <internal:SDL> function SDL_RWFromConstMem ] {

      - Parameters [2] {
        Parameter #0 [ <required> $buf ]
        Parameter #1 [ <optional> $size ]
      }
    }
    Function [ <internal:SDL> function SDL_RWsize ] {

      - Parameters [1] {
        Parameter #0 [ <required> $RWops ]
      }
    }
    Function [ <internal:SDL> function SDL_RWseek ] {

      - Parameters [3] {
        Parameter #0 [ <required> $RWops ]
        Parameter #1 [ <required> $offset ]
        Parameter #2 [ <required> $whence ]
      }
    }
    Function [ <internal:SDL> function SDL_RWtell ] {

      - Parameters [1] {
        Parameter #0 [ <required> $RWops ]
      }
    }
    Function [ <internal:SDL> function SDL_RWread ] {

      - Parameters [4] {
        Parameter #0 [ <required> $RWops ]
        Parameter #1 [ <required> &$buffer ]
        Parameter #2 [ <required> $size ]
        Parameter #3 [ <optional> $number ]
      }
    }
    Function [ <internal:SDL> function SDL_RWwrite ] {

      - Parameters [4] {
        Parameter #0 [ <required> $RWops ]
        Parameter #1 [ <required> $buffer ]
        Parameter #2 [ <optional> $size ]
        Parameter #3 [ <optional> $number ]
      }
    }
    Function [ <internal:SDL> function SDL_RWclose ] {

      - Parameters [1] {
        Parameter #0 [ <required> $RWops ]
      }
    }
    Function [ <internal:SDL> function SDL_ReadU8 ] {

      - Parameters [1] {
        Parameter #0 [ <required> $RWops ]
      }
    }
    Function [ <internal:SDL> function SDL_ReadLE16 ] {

      - Parameters [1] {
        Parameter #0 [ <required> $RWops ]
      }
    }
    Function [ <internal:SDL> function SDL_ReadBE16 ] {

      - Parameters [1] {
        Parameter #0 [ <required> $RWops ]
      }
    }
    Function [ <internal:SDL> function SDL_ReadLE32 ] {

      - Parameters [1] {
        Parameter #0 [ <required> $RWops ]
      }
    }
    Function [ <internal:SDL> function SDL_ReadBE32 ] {

      - Parameters [1] {
        Parameter #0 [ <required> $RWops ]
      }
    }
    Function [ <internal:SDL> function SDL_ReadLE64 ] {

      - Parameters [1] {
        Parameter #0 [ <required> $RWops ]
      }
    }
    Function [ <internal:SDL> function SDL_ReadBE64 ] {

      - Parameters [1] {
        Parameter #0 [ <required> $RWops ]
      }
    }
    Function [ <internal:SDL> function SDL_WriteU8 ] {

      - Parameters [2] {
        Parameter #0 [ <required> $RWops ]
        Parameter #1 [ <required> $value ]
      }
    }
    Function [ <internal:SDL> function SDL_WriteLE16 ] {

      - Parameters [2] {
        Parameter #0 [ <required> $RWops ]
        Parameter #1 [ <required> $value ]
      }
    }
    Function [ <internal:SDL> function SDL_WriteBE16 ] {

      - Parameters [2] {
        Parameter #0 [ <required> $RWops ]
        Parameter #1 [ <required> $value ]
      }
    }
    Function [ <internal:SDL> function SDL_WriteLE32 ] {

      - Parameters [2] {
        Parameter #0 [ <required> $RWops ]
        Parameter #1 [ <required> $value ]
      }
    }
    Function [ <internal:SDL> function SDL_WriteBE32 ] {

      - Parameters [2] {
        Parameter #0 [ <required> $RWops ]
        Parameter #1 [ <required> $value ]
      }
    }
    Function [ <internal:SDL> function SDL_WriteLE64 ] {

      - Parameters [2] {
        Parameter #0 [ <required> $RWops ]
        Parameter #1 [ <required> $value ]
      }
    }
    Function [ <internal:SDL> function SDL_WriteBE64 ] {

      - Parameters [2] {
        Parameter #0 [ <required> $RWops ]
        Parameter #1 [ <required> $value ]
      }
    }
    Function [ <internal:SDL> function SDL_Init ] {

      - Parameters [1] {
        Parameter #0 [ <optional> $flags ]
      }
    }
    Function [ <internal:SDL> function SDL_InitSubSystem ] {

      - Parameters [1] {
        Parameter #0 [ <required> $flags ]
      }
    }
    Function [ <internal:SDL> function SDL_Quit ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_QuitSubSystem ] {

      - Parameters [1] {
        Parameter #0 [ <required> $flags ]
      }
    }
    Function [ <internal:SDL> function SDL_WasInit ] {

      - Parameters [1] {
        Parameter #0 [ <optional> $flags ]
      }
    }
    Function [ <internal:SDL> function SDL_CreateRGBSurface ] {

      - Parameters [8] {
        Parameter #0 [ <required> $flags ]
        Parameter #1 [ <required> $width ]
        Parameter #2 [ <required> $height ]
        Parameter #3 [ <required> $depth ]
        Parameter #4 [ <required> $Rmask ]
        Parameter #5 [ <required> $Gmask ]
        Parameter #6 [ <optional> $Bmask ]
        Parameter #7 [ <optional> $Amask ]
      }
    }
    Function [ <internal:SDL> function SDL_FreeSurface ] {

      - Parameters [1] {
        Parameter #0 [ <required> $surface ]
      }
    }
    Function [ <internal:SDL> function SDL_FillRect ] {

      - Parameters [3] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $rect ]
        Parameter #2 [ <required> $color ]
      }
    }
    Function [ <internal:SDL> function SDL_FillRects ] {

      - Parameters [4] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $rects ]
        Parameter #2 [ <required> $count ]
        Parameter #3 [ <required> $color ]
      }
    }
    Function [ <internal:SDL> function SDL_MUSTLOCK ] {

      - Parameters [1] {
        Parameter #0 [ <required> $surface ]
      }
    }
    Function [ <internal:SDL> function SDL_LockSurface ] {

      - Parameters [1] {
        Parameter #0 [ <required> $surface ]
      }
    }
    Function [ <internal:SDL> function SDL_UnlockSurface ] {

      - Parameters [1] {
        Parameter #0 [ <required> $surface ]
      }
    }
    Function [ <internal:SDL> function SDL_LoadBMP_RW ] {

      - Parameters [2] {
        Parameter #0 [ <required> &$RWops ]
        Parameter #1 [ <required> $freesrc ]
      }
    }
    Function [ <internal:SDL> function SDL_LoadBMP ] {

      - Parameters [1] {
        Parameter #0 [ <required> $path ]
      }
    }
    Function [ <internal:SDL> function SDL_UpperBlit ] {

      - Parameters [4] {
        Parameter #0 [ <required> $srcsurface ]
        Parameter #1 [ <required> $srcrect ]
        Parameter #2 [ <required> $dstsurface ]
        Parameter #3 [ <optional> &$dstrect ]
      }
    }
    Function [ <internal:SDL> function SDL_SaveBMP_RW ] {

      - Parameters [3] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> &$rwops ]
        Parameter #2 [ <optional> $freedst ]
      }
    }
    Function [ <internal:SDL> function SDL_SaveBMP ] {

      - Parameters [2] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $path ]
      }
    }
    Function [ <internal:SDL> function SDL_SetSurfaceRLE ] {

      - Parameters [2] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $flag ]
      }
    }
    Function [ <internal:SDL> function SDL_SetColorKey ] {

      - Parameters [3] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $flag ]
        Parameter #2 [ <optional> $key ]
      }
    }
    Function [ <internal:SDL> function SDL_GetColorKey ] {

      - Parameters [2] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> &$key ]
      }
    }
    Function [ <internal:SDL> function SDL_SetSurfaceColorMod ] {

      - Parameters [4] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $red ]
        Parameter #2 [ <required> $green ]
        Parameter #3 [ <required> $blue ]
      }
    }
    Function [ <internal:SDL> function SDL_GetSurfaceColorMod ] {

      - Parameters [4] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> &$red ]
        Parameter #2 [ <required> &$green ]
        Parameter #3 [ <required> &$blue ]
      }
    }
    Function [ <internal:SDL> function SDL_SetSurfaceAlphaMod ] {

      - Parameters [2] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $alpha ]
      }
    }
    Function [ <internal:SDL> function SDL_GetSurfaceAlphaMod ] {

      - Parameters [2] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> &$alpha ]
      }
    }
    Function [ <internal:SDL> function SDL_SetSurfaceBlendMode ] {

      - Parameters [2] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $blendmmode ]
      }
    }
    Function [ <internal:SDL> function SDL_GetSurfaceBlendMode ] {

      - Parameters [2] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> &$blendmode ]
      }
    }
    Function [ <internal:SDL> function SDL_SetClipRect ] {

      - Parameters [2] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $cliprect ]
      }
    }
    Function [ <internal:SDL> function SDL_GetClipRect ] {

      - Parameters [2] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> &$cliprect ]
      }
    }
    Function [ <internal:SDL> function SDL_ConvertSurface ] {

      - Parameters [3] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $pixelformat ]
        Parameter #2 [ <optional> $flags ]
      }
    }
    Function [ <internal:SDL> function SDL_ConvertSurfaceFormat ] {

      - Parameters [3] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $format ]
        Parameter #2 [ <optional> $flags ]
      }
    }
    Function [ <internal:SDL> function SDL_ConvertPixels ] {

      - Parameters [8] {
        Parameter #0 [ <required> $height ]
        Parameter #1 [ <required> $width ]
        Parameter #2 [ <required> $src_format ]
        Parameter #3 [ <required> $src_pixels ]
        Parameter #4 [ <required> $src_pitch ]
        Parameter #5 [ <required> $dst_format ]
        Parameter #6 [ <required> $dst_pixel ]
        Parameter #7 [ <required> $dst_pitch ]
      }
    }
    Function [ <internal:SDL> function SDL_BlitSurface ] {

      - Parameters [4] {
        Parameter #0 [ <required> $srcsurface ]
        Parameter #1 [ <required> $srcrect ]
        Parameter #2 [ <required> $dstsurface ]
        Parameter #3 [ <optional> &$dstrect ]
      }
    }
    Function [ <internal:SDL> function SDL_GetRevision ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_GetRevisionNumber ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_GetVersion ] {

      - Parameters [1] {
        Parameter #0 [ <required> &$version_array ]
      }
    }
    Function [ <internal:SDL> function SDL_VERSION ] {

      - Parameters [1] {
        Parameter #0 [ <required> &$version_array ]
      }
    }
    Function [ <internal:SDL> function SDL_VERSIONNUM ] {

      - Parameters [3] {
        Parameter #0 [ <required> $x ]
        Parameter #1 [ <required> $y ]
        Parameter #2 [ <required> $z ]
      }
    }
    Function [ <internal:SDL> function SDL_VERSION_ATLEAST ] {

      - Parameters [3] {
        Parameter #0 [ <required> $x ]
        Parameter #1 [ <required> $y ]
        Parameter #2 [ <required> $z ]
      }
    }
    Function [ <internal:SDL> function SDL_GetNumVideoDrivers ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_GetVideoDriver ] {

      - Parameters [1] {
        Parameter #0 [ <required> $driverIndex ]
      }
    }
    Function [ <internal:SDL> function SDL_VideoInit ] {

      - Parameters [1] {
        Parameter #0 [ <optional> $drivername ]
      }
    }
    Function [ <internal:SDL> function SDL_VideoQuit ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_GetCurrentVideoDriver ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_GetNumVideoDisplays ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_GetDisplayName ] {

      - Parameters [1] {
        Parameter #0 [ <required> $displayIndex ]
      }
    }
    Function [ <internal:SDL> function SDL_GetDisplayBounds ] {

      - Parameters [2] {
        Parameter #0 [ <required> $displayIndex ]
        Parameter #1 [ <required> &$rect ]
      }
    }
    Function [ <internal:SDL> function SDL_GetNumDisplayModes ] {

      - Parameters [1] {
        Parameter #0 [ <required> $displayIndex ]
      }
    }
    Function [ <internal:SDL> function SDL_GetDisplayMode ] {

      - Parameters [2] {
        Parameter #0 [ <required> $displayIndex ]
        Parameter #1 [ <required> $modeIndex ]
      }
    }
    Function [ <internal:SDL> function SDL_GetDesktopDisplayMode ] {

      - Parameters [1] {
        Parameter #0 [ <required> $displayIndex ]
      }
    }
    Function [ <internal:SDL> function SDL_GetCurrentDisplayMode ] {

      - Parameters [1] {
        Parameter #0 [ <required> $displayIndex ]
      }
    }
    Function [ <internal:SDL> function SDL_GetClosestDisplayMode ] {

      - Parameters [3] {
        Parameter #0 [ <required> $displayIndex ]
        Parameter #1 [ <required> $desired_displaymode ]
        Parameter #2 [ <optional> &$closest_displaymode ]
      }
    }
    Function [ <internal:SDL> function SDL_IsScreenSaverEnabled ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_EnableScreenSaver ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_DisableScreenSaver ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function SDL_CreateWindow ] {

      - Parameters [6] {
        Parameter #0 [ <required> $title ]
        Parameter #1 [ <required> $x ]
        Parameter #2 [ <required> $y ]
        Parameter #3 [ <required> $w ]
        Parameter #4 [ <required> $y ]
        Parameter #5 [ <required> $flags ]
      }
    }
    Function [ <internal:SDL> function SDL_DestroyWindow ] {

      - Parameters [1] {
        Parameter #0 [ <required> $window ]
      }
    }
    Function [ <internal:SDL> function SDL_UpdateWindowSurface ] {

      - Parameters [1] {
        Parameter #0 [ <required> $window ]
      }
    }
    Function [ <internal:SDL> function SDL_GetWindowTitle ] {

      - Parameters [1] {
        Parameter #0 [ <required> $window ]
      }
    }
    Function [ <internal:SDL> function SDL_SetWindowTitle ] {

      - Parameters [2] {
        Parameter #0 [ <required> $window ]
        Parameter #1 [ <required> $title ]
      }
    }
    Function [ <internal:SDL> function SDL_GetWindowDisplayIndex ] {

      - Parameters [1] {
        Parameter #0 [ <required> $window ]
      }
    }
    Function [ <internal:SDL> function SDL_ShowWindow ] {

      - Parameters [1] {
        Parameter #0 [ <required> $window ]
      }
    }
    Function [ <internal:SDL> function SDL_HideWindow ] {

      - Parameters [1] {
        Parameter #0 [ <required> $window ]
      }
    }
    Function [ <internal:SDL> function SDL_RaiseWindow ] {

      - Parameters [1] {
        Parameter #0 [ <required> $window ]
      }
    }
    Function [ <internal:SDL> function SDL_MaximizeWindow ] {

      - Parameters [1] {
        Parameter #0 [ <required> $window ]
      }
    }
    Function [ <internal:SDL> function SDL_MinimizeWindow ] {

      - Parameters [1] {
        Parameter #0 [ <required> $window ]
      }
    }
    Function [ <internal:SDL> function SDL_RestoreWindow ] {

      - Parameters [1] {
        Parameter #0 [ <required> $window ]
      }
    }
    Function [ <internal:SDL> function SDL_GetWindowSurface ] {

      - Parameters [1] {
        Parameter #0 [ <required> $window ]
      }
    }
  }

  - Classes [10] {
    Class [ <internal:SDL> class SDL_Color ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> public $r ]
        Property [ <default> public $g ]
        Property [ <default> public $b ]
        Property [ <default> public $a ]
      }

      - Methods [1] {
        Method [ <internal:SDL, ctor> public method __construct ] {

          - Parameters [4] {
            Parameter #0 [ <required> $r ]
            Parameter #1 [ <required> $g ]
            Parameter #2 [ <required> $b ]
            Parameter #3 [ <required> $a ]
          }
        }
      }
    }

    Class [ <internal:SDL> class SDL_Palette implements ArrayAccess ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> public $ncolors ]
        Property [ <default> public $version ]
        Property [ <default> public $refcount ]
        Property [ <default> public $colors ]
      }

      - Methods [8] {
        Method [ <internal:SDL, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> $ncolors ]
          }
        }

        Method [ <internal:SDL> public method count ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:SDL, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:SDL, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $offset ]
            Parameter #1 [ <required> $color ]
          }
        }

        Method [ <internal:SDL, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:SDL> public method Free ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method SetColors ] {

          - Parameters [3] {
            Parameter #0 [ <required> $colors ]
            Parameter #1 [ <optional> $first ]
            Parameter #2 [ <optional> $ncolors ]
          }
        }
      }
    }

    Class [ <internal:SDL> class SDL_PixelFormat ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [16] {
        Property [ <default> public $format ]
        Property [ <default> public $BitsPerPixel ]
        Property [ <default> public $BytesPerPixel ]
        Property [ <default> public $Rmask ]
        Property [ <default> public $Gmask ]
        Property [ <default> public $Bmask ]
        Property [ <default> public $Amask ]
        Property [ <default> public $Rloss ]
        Property [ <default> public $Gloss ]
        Property [ <default> public $Bloss ]
        Property [ <default> public $Aloss ]
        Property [ <default> public $Rshift ]
        Property [ <default> public $Gshift ]
        Property [ <default> public $Bshift ]
        Property [ <default> public $Ashift ]
        Property [ <default> public $palette ]
      }

      - Methods [7] {
        Method [ <internal:SDL, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> $format ]
          }
        }

        Method [ <internal:SDL> public method GetRGB ] {

          - Parameters [4] {
            Parameter #0 [ <required> $pixel ]
            Parameter #1 [ <required> &$r ]
            Parameter #2 [ <required> &$g ]
            Parameter #3 [ <required> &$b ]
          }
        }

        Method [ <internal:SDL> public method GetRGBA ] {

          - Parameters [5] {
            Parameter #0 [ <required> $pixel ]
            Parameter #1 [ <required> &$r ]
            Parameter #2 [ <required> &$g ]
            Parameter #3 [ <required> &$b ]
            Parameter #4 [ <required> &$a ]
          }
        }

        Method [ <internal:SDL> public method Free ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method SetPalette ] {

          - Parameters [1] {
            Parameter #0 [ <required> $palette ]
          }
        }

        Method [ <internal:SDL> public method MapRGB ] {

          - Parameters [3] {
            Parameter #0 [ <required> $r ]
            Parameter #1 [ <required> $g ]
            Parameter #2 [ <required> $b ]
          }
        }

        Method [ <internal:SDL> public method MapRGBA ] {

          - Parameters [4] {
            Parameter #0 [ <required> $r ]
            Parameter #1 [ <required> $g ]
            Parameter #2 [ <required> $b ]
            Parameter #3 [ <required> $a ]
          }
        }
      }
    }

    Class [ <internal:SDL> class SDL_Pixels implements ArrayAccess ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> public $pitch ]
        Property [ <default> public $h ]
        Property [ <default> public $count ]
      }

      - Methods [8] {
        Method [ <internal:SDL, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pitch ]
            Parameter #1 [ <required> $h ]
          }
        }

        Method [ <internal:SDL> public method count ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:SDL, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:SDL, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $offset ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:SDL, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:SDL> public method GetByte ] {

          - Parameters [2] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
          }
        }

        Method [ <internal:SDL> public method SetByte ] {

          - Parameters [3] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
            Parameter #2 [ <required> $byte ]
          }
        }
      }
    }

    Class [ <internal:SDL> class SDL_Rect ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> public $x ]
        Property [ <default> public $y ]
        Property [ <default> public $w ]
        Property [ <default> public $h ]
      }

      - Methods [7] {
        Method [ <internal:SDL, ctor> public method __construct ] {

          - Parameters [4] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
            Parameter #2 [ <required> $w ]
            Parameter #3 [ <required> $y ]
          }
        }

        Method [ <internal:SDL> public method Empty ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method Equal ] {

          - Parameters [1] {
            Parameter #0 [ <required> $rect ]
          }
        }

        Method [ <internal:SDL> public method HasIntersection ] {

          - Parameters [1] {
            Parameter #0 [ <required> $rect ]
          }
        }

        Method [ <internal:SDL> public method Intersect ] {

          - Parameters [2] {
            Parameter #0 [ <required> $rect ]
            Parameter #1 [ <required> &$result ]
          }
        }

        Method [ <internal:SDL> public method Union ] {

          - Parameters [2] {
            Parameter #0 [ <required> $rect ]
            Parameter #1 [ <required> &$result ]
          }
        }

        Method [ <internal:SDL> public method IntersectLine ] {

          - Parameters [4] {
            Parameter #0 [ <required> &$X1 ]
            Parameter #1 [ <required> &$Y1 ]
            Parameter #2 [ <required> &$X2 ]
            Parameter #3 [ <required> &$Y2 ]
          }
        }
      }
    }

    Class [ <internal:SDL> class SDL_Point ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> public $x ]
        Property [ <default> public $y ]
      }

      - Methods [1] {
        Method [ <internal:SDL, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
          }
        }
      }
    }

    Class [ <internal:SDL> class SDL_RWops ] {

      - Constants [6] {
        Constant [ integer UNKNOWN ] { 0 }
        Constant [ integer WINFILE ] { 1 }
        Constant [ integer STDFILE ] { 2 }
        Constant [ integer JNIFILE ] { 3 }
        Constant [ integer MEMORY ] { 4 }
        Constant [ integer MEMORY_RO ] { 5 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> public $type ]
      }

      - Methods [22] {
        Method [ <internal:SDL, ctor> public method __construct ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method Free ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method Size ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method Seek ] {

          - Parameters [2] {
            Parameter #0 [ <required> $offset ]
            Parameter #1 [ <required> $whence ]
          }
        }

        Method [ <internal:SDL> public method Tell ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method Read ] {

          - Parameters [3] {
            Parameter #0 [ <required> &$buffer ]
            Parameter #1 [ <required> $size ]
            Parameter #2 [ <optional> $number ]
          }
        }

        Method [ <internal:SDL> public method Write ] {

          - Parameters [3] {
            Parameter #0 [ <required> $buffer ]
            Parameter #1 [ <optional> $size ]
            Parameter #2 [ <optional> $number ]
          }
        }

        Method [ <internal:SDL> public method Close ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method ReadU8 ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method ReadLE16 ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method ReadBE16 ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method ReadLE32 ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method ReadBE32 ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method ReadLE64 ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method ReadBE64 ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method WriteU8 ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:SDL> public method WriteLE16 ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:SDL> public method WriteBE16 ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:SDL> public method WriteLE32 ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:SDL> public method WriteBE32 ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:SDL> public method WriteLE64 ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:SDL> public method WriteBE64 ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:SDL> class SDL_Surface ] {

      - Constants [4] {
        Constant [ integer SWSURFACE ] { 0 }
        Constant [ integer PREALLOC ] { 1 }
        Constant [ integer RLEACCEL ] { 2 }
        Constant [ integer DONTFREE ] { 4 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [7] {
        Property [ <default> public $flags ]
        Property [ <default> public $w ]
        Property [ <default> public $h ]
        Property [ <default> public $pitch ]
        Property [ <default> public $format ]
        Property [ <default> public $clip_rect ]
        Property [ <default> public $pixels ]
      }

      - Methods [24] {
        Method [ <internal:SDL, ctor> public method __construct ] {

          - Parameters [8] {
            Parameter #0 [ <required> $flags ]
            Parameter #1 [ <required> $width ]
            Parameter #2 [ <required> $height ]
            Parameter #3 [ <required> $depth ]
            Parameter #4 [ <required> $Rmask ]
            Parameter #5 [ <required> $Gmask ]
            Parameter #6 [ <optional> $Bmask ]
            Parameter #7 [ <optional> $Amask ]
          }
        }

        Method [ <internal:SDL> public method Free ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method FillRect ] {

          - Parameters [2] {
            Parameter #0 [ <required> $rect ]
            Parameter #1 [ <required> $color ]
          }
        }

        Method [ <internal:SDL> public method FillRects ] {

          - Parameters [3] {
            Parameter #0 [ <required> $rects ]
            Parameter #1 [ <required> $count ]
            Parameter #2 [ <required> $color ]
          }
        }

        Method [ <internal:SDL> public method MustLock ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method Lock ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method Unlock ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method Blit ] {

          - Parameters [3] {
            Parameter #0 [ <required> $srcrect ]
            Parameter #1 [ <required> $dstsurface ]
            Parameter #2 [ <optional> &$dstrect ]
          }
        }

        Method [ <internal:SDL> public method UpperBlit ] {

          - Parameters [3] {
            Parameter #0 [ <required> $srcrect ]
            Parameter #1 [ <required> $dstsurface ]
            Parameter #2 [ <optional> &$dstrect ]
          }
        }

        Method [ <internal:SDL> public method SaveBMP_RW ] {

          - Parameters [2] {
            Parameter #0 [ <required> &$rwops ]
            Parameter #1 [ <optional> $freedst ]
          }
        }

        Method [ <internal:SDL> public method SaveBMP ] {

          - Parameters [1] {
            Parameter #0 [ <required> $path ]
          }
        }

        Method [ <internal:SDL> public method SetRLE ] {

          - Parameters [1] {
            Parameter #0 [ <required> $flag ]
          }
        }

        Method [ <internal:SDL> public method SetColorKey ] {

          - Parameters [2] {
            Parameter #0 [ <required> $flag ]
            Parameter #1 [ <optional> $key ]
          }
        }

        Method [ <internal:SDL> public method GetColorKey ] {

          - Parameters [1] {
            Parameter #0 [ <required> &$key ]
          }
        }

        Method [ <internal:SDL> public method SetColorMod ] {

          - Parameters [3] {
            Parameter #0 [ <required> $red ]
            Parameter #1 [ <required> $green ]
            Parameter #2 [ <required> $blue ]
          }
        }

        Method [ <internal:SDL> public method GetColorMod ] {

          - Parameters [3] {
            Parameter #0 [ <required> &$red ]
            Parameter #1 [ <required> &$green ]
            Parameter #2 [ <required> &$blue ]
          }
        }

        Method [ <internal:SDL> public method SetAlphaMod ] {

          - Parameters [1] {
            Parameter #0 [ <required> $alpha ]
          }
        }

        Method [ <internal:SDL> public method GetAlphaMod ] {

          - Parameters [1] {
            Parameter #0 [ <required> &$alpha ]
          }
        }

        Method [ <internal:SDL> public method SetBlendMode ] {

          - Parameters [1] {
            Parameter #0 [ <required> $blendmmode ]
          }
        }

        Method [ <internal:SDL> public method GetBlendMode ] {

          - Parameters [1] {
            Parameter #0 [ <required> &$blendmode ]
          }
        }

        Method [ <internal:SDL> public method SetClipRect ] {

          - Parameters [1] {
            Parameter #0 [ <required> $cliprect ]
          }
        }

        Method [ <internal:SDL> public method GetClipRect ] {

          - Parameters [1] {
            Parameter #0 [ <required> &$cliprect ]
          }
        }

        Method [ <internal:SDL> public method Convert ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pixelformat ]
            Parameter #1 [ <optional> $flags ]
          }
        }

        Method [ <internal:SDL> public method ConvertFormat ] {

          - Parameters [2] {
            Parameter #0 [ <required> $format ]
            Parameter #1 [ <optional> $flags ]
          }
        }
      }
    }

    Class [ <internal:SDL> class SDL_DisplayMode ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> public $format ]
        Property [ <default> public $w ]
        Property [ <default> public $h ]
        Property [ <default> public $refresh_rate ]
      }

      - Methods [1] {
        Method [ <internal:SDL, ctor> public method __construct ] {

          - Parameters [4] {
            Parameter #0 [ <required> $format ]
            Parameter #1 [ <required> $w ]
            Parameter #2 [ <required> $h ]
            Parameter #3 [ <required> $refresh_rate ]
          }
        }
      }
    }

    Class [ <internal:SDL> class SDL_Window ] {

      - Constants [14] {
        Constant [ integer FULLSCREEN ] { 1 }
        Constant [ integer OPENGL ] { 2 }
        Constant [ integer SHOWN ] { 4 }
        Constant [ integer HIDDEN ] { 8 }
        Constant [ integer BORDERLESS ] { 16 }
        Constant [ integer RESIZABLE ] { 32 }
        Constant [ integer MINIMIZED ] { 64 }
        Constant [ integer MAXIMIZED ] { 128 }
        Constant [ integer INPUT_GRABBED ] { 256 }
        Constant [ integer INPUT_FOCUS ] { 512 }
        Constant [ integer MOUSE_FOCUS ] { 1024 }
        Constant [ integer FULLSCREEN_DESKTOP ] { 4097 }
        Constant [ integer FOREIGN ] { 2048 }
        Constant [ integer ALLOW_HIGHDPI ] { 8192 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [13] {
        Method [ <internal:SDL, ctor> public method __construct ] {

          - Parameters [6] {
            Parameter #0 [ <required> $title ]
            Parameter #1 [ <required> $x ]
            Parameter #2 [ <required> $y ]
            Parameter #3 [ <required> $w ]
            Parameter #4 [ <required> $y ]
            Parameter #5 [ <required> $flags ]
          }
        }

        Method [ <internal:SDL> public method UpdateSurface ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method Destroy ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method GetTitle ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method SetTitle ] {

          - Parameters [1] {
            Parameter #0 [ <required> $title ]
          }
        }

        Method [ <internal:SDL> public method GetDisplayIndex ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method Show ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method Hide ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method Raise ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method Maximize ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method Minimize ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method Restore ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SDL> public method GetSurface ] {

          - Parameters [0] {
          }
        }
      }
    }
  }
}

